// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model JobSeeker {
  id                           Int                            @id @default(autoincrement())
  user                         User                           @relation(fields: [userId], references: [id])
  userId                       Int
  firstName                    String
  lastName                     String
  middleName                   String
  birthDate                    DateTime
  tin                          String
  gender                       String
  email                        String
  maritalStatus                String
  passportCode                 String
  phoneNumber                  String
  messengerNumber              String                         @default("")
  address                      String
  addressOfBirth               String                         @default("")
  desiredSalary                String
  dateOfReadiness              DateTime
  desiredCountry               String
  desiredCity                  String                         @default("")
  criminalRecord               String
  additionalInformation        String?
  syncedWith1C                 Boolean
  additionalContactInformation AdditionalContactInfromation[]
  education                    Education[]
  knowledgeOfLanguages         KnowledgeOfLanguages[]
  WorkExperience               WorkExperience[]
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @default(now())
}

model AdditionalContactInfromation {
  id          Int       @id @default(autoincrement())
  jobSeeker   JobSeeker @relation(fields: [jobSeekerId], references: [id])
  jobSeekerId Int
  fullname    String
  status      String
  phoneNumber String
}

model KnowledgeOfLanguages {
  id          Int       @id @default(autoincrement())
  jobSeeker   JobSeeker @relation(fields: [jobSeekerId], references: [id])
  jobSeekerId Int
  language    String
  level       String
}

model WorkExperience {
  id               Int       @id @default(autoincrement())
  jobSeeker        JobSeeker @relation(fields: [jobSeekerId], references: [id])
  jobSeekerId      Int
  jobTitle         String
  workplace        String
  dateStart        DateTime
  dateEnd          DateTime?
  responsibilities String?
}

model Education {
  id          Int       @id @default(autoincrement())
  jobSeeker   JobSeeker @relation(fields: [jobSeekerId], references: [id])
  jobSeekerId Int
  education   String
  institution String
  specialty   String
}

model User {
  id          Int         @id @default(autoincrement())
  phoneNumber String
  SendSMS     SendSMS[]
  JobSeeker   JobSeeker[]
}

model SendSMS {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  code   String
}
